'use strict'

const { product, clothing, electronics } = require('../models/product.model')
const { BadRequestError } = require('../core/error.response');

/**
    - T√°ch bi·ªát logic kh·ªüi t·∫°o ‚Üí gom vi·ªác t·∫°o object v·ªÅ m·ªôt n∆°i (ProductFactory).
    - Nh·∫•t qu√°n ‚Üí t·∫•t c·∫£ s·∫£n ph·∫©m ƒë·ªÅu k·∫ø th·ª´a Product, m·ªói lo·∫°i override theo nhu c·∫ßu.
    - D·ªÖ m·ªü r·ªông (OCP) ‚Üí th√™m lo·∫°i m·ªõi (Furniture‚Ä¶) ch·ªâ c·∫ßn t·∫°o subclass + update Factory.
    - Gi·∫£m l·ªói & d·ªÖ test ‚Üí ki·ªÉm so√°t type, throw l·ªói n·∫øu kh√¥ng h·ª£p l·ªá.
    - Ph√π h·ª£p e-commerce/domain ph·ª©c t·∫°p ‚Üí m·ªói lo·∫°i s·∫£n ph·∫©m c√≥ attribute ri√™ng, d·ªÖ qu·∫£n l√Ω.
    üëâ N√≥i ng·∫Øn g·ªçn: Factory Pattern gi√∫p t·∫°o object nhi·ªÅu lo·∫°i m·ªôt c√°ch chu·∫©n h√≥a, d·ªÖ m·ªü r·ªông, d·ªÖ b·∫£o tr√¨, v√† tr√°nh duplicate code.
 */

// define Factory class to create product
class ProductFactory {
    static createProduct(type, data) {
        switch (type) {
        case 'Clothing':
            return new Clothing(data).createProduct();
        case 'Electronics':
            return new Electronics(data).createProduct();
        default:
            throw new BadRequestError('Invalid product type');
        }
    }
}

class Product {
    constructor(data) {
        this.product_name = data.product_name;
        this.product_thumb = data.product_thumb;
        this.product_description = data.product_description;
        this.product_price = data.product_price;
        this.product_quantity = data.product_quantity;
        this.product_type = data.product_type;
        this.product_attributes = data.product_attributes;
        this.product_shop = data.product_shop;
    }

    async createProduct(product_id) {
        return await product.create({...this, _id: product_id})
    }
}

// define sub-class for different product types clothing
class Clothing extends Product {
    async createProduct() {
        const newClothing = await clothing.create(this.product_attributes)
        if (!newClothing) throw new BadRequestError('Create clothing failed')

        const newProduct = await super.createProduct()
        if (!newProduct) throw new BadRequestError('Create product failed')

        return newProduct
    }
}

// define sub-class for different product types electronics
class Electronics extends Product {
    async createProduct() {
        const newElectronics = await electronics.create({
            ...this.product_attributes,
            product_shop: this.product_shop
        })
        if (!newElectronics) throw new BadRequestError('Create electronics failed')

        const newProduct = await super.createProduct(newElectronics._id)
        if (!newProduct) throw new BadRequestError('Create product failed')

        return newProduct
    }
}

module.exports = ProductFactory;